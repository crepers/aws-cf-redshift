AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'AWS CloudFormation template for the text analysis through Elasticsearch'
Parameters:
  InstanceKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of the private key file to use for SSH/RDP access.  You shouldn't need to do any SSH access, but just in case.
  TwitterTermList:
    Description: List of terms for twitter to listen to
    Type: String
    Default: "'AWS', 'VPC', 'EC2', 'RDS', 'S3'"
  TwitterLanguages:
    Description: List of languages to use for the twitter streaming reader
    Type: String
    Default: "'en', 'es', 'de', 'fr', 'ko', 'ja'"
  TwitterAuthConsumerKey:
    Description: Consumer key for access twitter
    Type: String
  TwitterAuthConsumerSecret:
    Description: Consumer Secret for access twitter
    Type: String
  TwitterAuthAccessToken:
    Description: Access Token for calling twitter
    Type: String
  TwitterAuthAccessTokenSecret:
    Description: Access Token Secret for calling twitter
    Type: String
  ApplicationName:
    Description: Name of the application deploying for the Social Media Analytics
    Type: String
    Default: Social-Media-Analytics
  VPCID:
    Description: The name of the VPC.
    # Type: String
    Type: AWS::EC2::VPC::Id
    AllowedPattern: '([a-z]|[0-9]|-)+'
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: "Must be the Subnet ID of an existing Subnet."
  PrivateSubNet1:
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: "Must be the Subnet ID of an existing Subnet."
  PrivateSubNet2:
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: "Must be the Subnet ID of an existing Subnet." 
  BastionSecurityGroupID:
    Description: The name of the Security Group ID of Bastion Host.
    # Type: String
    Type: AWS::EC2::SecurityGroup::Id
    AllowedPattern: '([a-z]|[0-9]|-)+'
Mappings:
  #  This is just the Amazon Linux AMI:
  AmazonLinuxAMI:
    us-east-1: # Virginia
      AMI: ami-a4c7edb2
    us-east-2: # Ohio
      AMI: ami-8a7859ef
    us-west-1: # North California
      AMI: ami-327f5352
    us-west-2: # Oregon
      AMI: ami-6df1e514
    eu-west-1: # Ireland
      AMI: ami-d7b9a2b1
    eu-west-2: # London
      AMI: ami-ed100689
    eu-central-1: # Frankfurt
      AMI: ami-82be18ed
    sa-east-1: # Sao Paulo
      AMI: ami-87dab1eb
    ap-southeast-1: # Singapore
      AMI: ami-77af2014
    ap-southeast-2: # Sydney
      AMI: ami-10918173
    ap-northeast-1: # Tokyo
      AMI: ami-3bd3c45c
    ap-northeast-2: # Seoul
      AMI: ami-e21cc38c
    ca-central-1: # Canada
      AMI: ami-a7aa15c3
    ap-south-1: # Mumbai
      AMI: ami-47205e28

Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref BastionSecurityGroupID
      VpcId: !Ref VPCID

  TweetsEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for EC2 Twitter Reader
      VpcId: !Ref VPCID
      Tags:
      - Key: Name
        Value: TweetsEC2SecurityGroup
      - Key: ResourceGroup
        Value: CloudFormationResource
      - Key: Project
        Value: !Join ['-', [!Ref 'ApplicationName', !Ref 'AWS::Region']]
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  SocialMediaAnalyticsEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        -
          PolicyName: socialmedia-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'firehose:DeleteDeliveryStream'
                    - 'firehose:PutRecord'
                    - 'firehose:PutRecordBatch'
                    - 'firehose:UpdateDestination'
                Resource: '*'

  TweetsBucket:
    Type: AWS::S3::Bucket

  TwitterStreamingInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref SocialMediaAnalyticsEC2Role

  TwitterStreamingReaderServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ AmazonLinuxAMI, !Ref 'AWS::Region', AMI]  # Lookup the AMI in the region map
      InstanceType: t2.medium                                         # Any size is fine
      KeyName: !Ref InstanceKeyName                                   # Use the keypair from the input parameters
      SecurityGroupIds:
      - !Ref TweetsEC2SecurityGroup
      IamInstanceProfile: !Ref TwitterStreamingInstanceProfile
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'ApplicationName', 'DeployGroup', !Ref 'AWS::Region']]
      - Key: Project
        Value: !Join ['-', [!Ref 'ApplicationName', !Ref 'AWS::Region']]
      UserData:
        Fn::Base64: 
          Fn::Sub:
          - |     # No more Fn::Join needed
            #!/bin/bash -ex
            set -e

            sleep 60

            yum clean all

            yum -y install nodejs npm --enablerepo=epel

            npm config set registry http://registry.npmjs.org/

            npm install node-sass request@2.81.0

            echo "var twitter_config = module.exports = {
            twitter: {
                consumer_key: '${TwitterConsumerKey}',
                consumer_secret: '${TwitterConsumerSecret}',
                access_token: '${TwitterAccessToken}',
                access_token_secret: '${TwitterTokenSecret}'
              },
            topics: [${TwitterTerms}],
            languages: [${TwitterLanguages}],
            kinesis_delivery: '${KinesisIngestionFirehose}'
            }" > /home/ec2-user/twitter_reader_config.js

            wget https://s3.amazonaws.com/serverless-analytics/SocialMediaAnalytics-blog/SocialAnalyticsReader.tar

            tar --warning=no-unknown-keyword -xf SocialAnalyticsReader.tar -C /home/ec2-user/

            echo "Service started."
          - {
              TwitterTerms: !Ref TwitterTermList,
              TwitterLanguages: !Ref TwitterLanguages ,
              TwitterConsumerKey: !Ref TwitterAuthConsumerKey,
              TwitterConsumerSecret: !Ref TwitterAuthConsumerSecret,
              TwitterAccessToken: !Ref TwitterAuthAccessToken,
              TwitterTokenSecret: !Ref TwitterAuthAccessTokenSecret,
              KinesisIngestionFirehose: !Ref IngestionFirehoseStream
            }

  IngestionFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ElasticsearchDestinationConfiguration:
        BufferingHints: 
          IntervalInSeconds: 60
          SizeInMBs: 5
        DomainARN: !GetAtt ElasticsearchDomain.DomainArn
        IndexName: "raw"
        IndexRotationPeriod: "NoRotation"
        TypeName: "fromFirehose"
        RetryOptions: 
          DurationInSeconds: "60"
        RoleARN: !GetAtt IngestionFirehoseRole.Arn
        S3BackupMode: "AllDocuments"
        S3Configuration: 
          BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
          BufferingHints: 
            IntervalInSeconds: "60"
            SizeInMBs: "5"
          CompressionFormat: "UNCOMPRESSED"
          Prefix: "raw/"
          RoleARN: !GetAtt IngestionFirehoseRole.Arn
        VpcConfiguration:  
          RoleARN: 
            - !GetAtt IngestionFirehoseRole.Arn
          SecurityGroupIds: 
            - !Ref SecurityGroup
          SubnetIds:
            - !Ref PrivateSubNet1
            - !Ref PrivateSubNet2
                      
  EntitiesFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ElasticsearchDestinationConfiguration:
        BufferingHints: 
          IntervalInSeconds: 60
          SizeInMBs: 5
        DomainARN: !GetAtt ElasticsearchDomain.DomainArn
        IndexName: "entities"
        IndexRotationPeriod: "NoRotation"
        TypeName: "fromFirehose"
        RetryOptions: 
          DurationInSeconds: "60"
        RoleARN: !GetAtt IngestionFirehoseRole.Arn
        S3BackupMode: "AllDocuments"
        S3Configuration: 
          BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
          BufferingHints: 
            IntervalInSeconds: "60"
            SizeInMBs: "5"
          CompressionFormat: "UNCOMPRESSED"
          Prefix: "entities/"
          RoleARN: !GetAtt IngestionFirehoseRole.Arn
        VpcConfiguration:  
          RoleARN: 
            - !GetAtt IngestionFirehoseRole.Arn
          SecurityGroupIds: 
            - !Ref SecurityGroup
          SubnetIds:
            - !Ref PrivateSubNet1
            - !Ref PrivateSubNet2

  SentimentFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ElasticsearchDestinationConfiguration:
        BufferingHints: 
          IntervalInSeconds: 60
          SizeInMBs: 5
        DomainARN: !GetAtt ElasticsearchDomain.DomainArn
        IndexName: "sentiment"
        IndexRotationPeriod: "NoRotation"
        TypeName: "fromFirehose"
        RetryOptions: 
          DurationInSeconds: "60"
        RoleARN: !GetAtt IngestionFirehoseRole.Arn
        S3BackupMode: "AllDocuments"
        S3Configuration: 
          BucketARN: !Join ['', ['arn:aws:s3:::', !Ref TweetsBucket]]
          BufferingHints: 
            IntervalInSeconds: "60"
            SizeInMBs: "5"
          CompressionFormat: "UNCOMPRESSED"
          Prefix: "sentiment/"
          RoleARN: !GetAtt IngestionFirehoseRole.Arn
        VpcConfiguration:  
          RoleARN: 
            - !GetAtt IngestionFirehoseRole.Arn
          SecurityGroupIds: 
            - !Ref SecurityGroup
          SubnetIds:
            - !Ref PrivateSubNet1
            - !Ref PrivateSubNet2

  IngestionFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref 'AWS::AccountId'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:Describe* 
                  - ec2:DeleteNetworkInterface
                Resource:
                  - '*'
                Effect: Allow
          PolicyName: es-ec2-policy
          
  IngestionFirehosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: TweetIngestionFirehosePolicy
      Roles:
        - !Ref IngestionFirehoseRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:*
              - es:*
              - ec2:CreateNetworkInterface
              - ec2:CreateNetworkInterfacePermission
              - ec2:Describe*
              - ec2:DeleteNetworkInterface
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - arn:aws:logs:*:*:*

  SocialMediaAnalyticLambdaFuntionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: SocialMediaAnalyticLambdaFuntionExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CloudWatchAccess
            Effect: Allow
            Action: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: arn:aws:logs:*:*:*
          - Sid: S3Access
            Effect: Allow
            Action: ['s3:GetObject', 's3:PutObject']
            Resource: [!GetAtt [TweetsBucket, Arn],
                      !Join ['', [!GetAtt [TweetsBucket, Arn], /*]]]
          - Sid: FirehoseAccess
            Effect: Allow
            Action: ['firehose:ListDeliveryStreams', 'firehose:PutRecord', 'firehose:PutRecordBatch']
            Resource: [!GetAtt [SentimentFirehoseStream, Arn],
                       !GetAtt [EntitiesFirehoseStream, Arn]]
          - Sid: ComprehendAccess
            Effect: Allow
            Action: ['comprehend:DetectEntities', 'comprehend:DetectSentiment']
            Resource: '*'   
          - Sid: TranslateAccess
            Effect: Allow
            Action: ['translate:TranslateText']
            Resource: '*'           

  SocialMediaAnalyticsLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: s3://serverless-analytics/SocialMediaAnalytics-blog/SocialMediaLambdaFunction.zip
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 256
      Timeout: 300
      Role:
        Fn::GetAtt:
        - SocialMediaAnalyticLambdaFuntionLambdaRole
        - Arn
      Environment:
        Variables:
          SENTIMENT_STREAM: !Ref SentimentFirehoseStream
          ENTITY_STREAM: !Ref EntitiesFirehoseStream

  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: 'true'
        InstanceCount: '2'
        ZoneAwarenessEnabled: 'true'
        InstanceType: m5.large.elasticsearch
        DedicatedMasterType: m5.large.elasticsearch
        DedicatedMasterCount: '3'
      ElasticsearchVersion: '6.2'
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 20
        VolumeType: gp2
      SnapshotOptions:
        AutomatedSnapshotStartHour: '0'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: "*"
          Action: 
          - 'es:ESHttp*'
      VPCOptions:
        SecurityGroupIds: 
        - !Ref SecurityGroup
        SubnetIds:
          - !Ref PrivateSubNet1
          - !Ref PrivateSubNet2

Outputs:
  SSHCommand:
    Description: To establish an SSH tunnel with the twitter stream reader, type the following command.
    Value: !Join ['', [ssh -i ~/, !Ref 'InstanceKeyName', .pem ec2-user@, !GetAtt [
          TwitterStreamingReaderServer, PublicDnsName]]]